<?php

namespace DummyNamespace;

{modelInclude}use Audentio\LaravelGraphQL\GraphQL\Definitions\Type;
use Audentio\LaravelGraphQL\GraphQL\Support\Query;
use Audentio\LaravelGraphQL\GraphQL\Traits\ErrorTrait;
use GraphQL\Type\Definition\ResolveInfo;
use GraphQL\Type\Definition\Type as GraphQLType;
use Illuminate\Database\Eloquent\Builder;
use Rebing\GraphQL\Support\Facades\GraphQL;
use Rebing\GraphQL\Support\SelectFields;

class DummyClass extends Query
{
    /** @var DummyClass */
    protected static $instance;

    protected $attributes = [
        'name' => 'DummyClass',
        'description' => 'A query'
    ];

    public static function getType(): GraphQLType
    {
        return {graphQLTypeStatement};
    }

    public static function getArgs($scope = ''): array
    {
        $instance = self::$instance;

        $args = [{args}
        ];

        return $args;
    }

    /**
     * @param Builder $root
     * @param $args
     * @param SelectFields $fields
     * @param ResolveInfo $info
     * @return mixed
     */
    public static function getResolve($root, $args, $context, ResolveInfo $info, \Closure $getSelectFields)
    {
        $instance = self::$instance;
        $fields = $getSelectFields();
        $select = $fields->getSelect();
        $with = $fields->getRelations();
        $root->with($with);

        return [];
    }

    public function resolve($root, $args, $context, ResolveInfo $info, \Closure $getSelectFields)
    {{rootDef}
        return self::getResolve($root, $args, $context, $info, $getSelectFields);
    }

    public function __construct()
    {
        self::$instance = $this;
    }
}